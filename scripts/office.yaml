office_close_shades:
  alias: Office - Close Shades
  icon: mdi:roller-shade-closed
  mode: single
  sequence:
  - action: cover.close_cover
    target:
      entity_id: >
        cover.office_shade_a
        {% if is_state("binary_sensor.office_window_sensor_window_door_is_open", "off") %},cover.office_shade_b{% endif %}

office_lockdown:
  alias: Office - Lockdown
  icon: mdi:shield-lock
  mode: single
  sequence:
  - action: script.office_close_shades
  - delay: { seconds: 20 }
  - action: light.turn_on
    target: { entity_id: light.office_lights }

office_turn_off:
  alias: Office - Turn Off
  icon: mdi:power-off
  mode: single
  sequence:
  - parallel:
    - if:
      - '{{ not is_state("climate.office_air", "off") }}'
      then:
      - action: climate.turn_off
        target: { entity_id: climate.office_air }
    - action: media_player.turn_off
      target: { entity_id: media_player.office_receiver_main_zone }
    - action: switch.turn_off
      target: { entity_id: switch.office_monitor }
    - action: remote.send_command
      data: { device: PC, command: LockPC, num_repeats: 2 }
      target: { entity_id: remote.office }

office_turn_on:
  alias: Office - Turn On
  icon: mdi:power-on
  mode: single
  sequence:
  - parallel:
    - if:
      - '{{ is_state("binary_sensor.office_window_sensor_window_door_is_open", "off") }}'
      - '{{ is_state("climate.office_air", "off") }}'
      - condition: or
        conditions:
        - '{{ float(state_attr("climate.office_air", "current_temperature")) > float(states("input_number.office_air_indoor_temperature_threshold")) }}'
        - '{{ float(states("sensor.office_fan_temperature")) > float(states("input_number.office_air_indoor_temperature_threshold")) }}'
        - '{{ float(states("sensor.office_sensor_air_temperature")) > float(states("input_number.office_air_indoor_temperature_threshold")) }}'
      then:
      - action: weather.get_forecasts
        data: { type: hourly }
        target: { entity_id: weather.home }
        response_variable: forecast
      - if:
        - '{{ forecast["weather.home"].forecast | map(attribute="temperature") | max > float(states("input_number.office_air_outdoor_temperature_threshold")) }}'
        then:
        - action: climate.set_hvac_mode
          data: { hvac_mode: cool }
          target: { entity_id: climate.office_air }
    - action: media_player.turn_on
      target: { entity_id: media_player.office_receiver_main_zone }
    - action: switch.turn_on
      target: { entity_id: switch.office_monitor }
    - action: remote.send_command
      data: { device: PC, command: Break, num_repeats: 2 }
      target: { entity_id: remote.office }
