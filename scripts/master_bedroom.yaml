master_bedroom_turn_off:
  alias: Master Bedroom - Turn Off
  icon: mdi:power-off
  mode: single
  sequence:
  - parallel:
    - if:
      - '{{ not is_state("climate.master_bedroom_air", "off") }}'
      then:
      - action: script.midea_turn_off
        data: { target: { entity_id: climate.master_bedroom_air } }
      # - action: climate.turn_off
      #   target: { entity_id: climate.master_bedroom_air }

master_bedroom_turn_on:
  alias: Master Bedroom - Turn On
  icon: mdi:power-on
  mode: single
  sequence:
  - parallel: []

master_bedroom_air_day:
  alias: Master Bedroom Air - Day
  icon: mdi:sun-thermometer
  mode: single
  sequence:
  - parallel:
    - if:
      - '{{ not is_state("climate.master_bedroom_air", "off") }}'
      - '{{ is_state_attr("climate.master_bedroom_air", "temperature", float(states("input_number.master_bedroom_air_night_temperature"))) }}'
      then:
      - action: weather.get_forecasts
        data: { type: hourly }
        target: { entity_id: weather.home }
        response_variable: forecast
      - if:
        - '{{ forecast["weather.home"].forecast | map(attribute="temperature") | max > float(states("input_number.master_bedroom_air_day_threshold")) }}'
        then:
        - action: script.midea_set_temperature
          data:
            data:
              hvac_mode: cool
              temperature: '{{ states("input_number.master_bedroom_air_day_temperature") }}'
            target: { entity_id: climate.master_bedroom_air }
        # - action: climate.set_temperature
        #   data:
        #     hvac_mode: cool
        #     temperature: '{{ states("input_number.master_bedroom_air_day_temperature") }}'
        #   target: { entity_id: climate.master_bedroom_air }
        else:
        - action: script.midea_turn_off
          data: { target: { entity_id: climate.master_bedroom_air } }
        # - action: climate.turn_off
        #   target: { entity_id: climate.master_bedroom_air }
    - action: zwave_js.set_config_parameter
      data: { parameter: 3, value: 3 }
      target: { entity_id: switch.master_bathroom_toilet_lights }

master_bedroom_air_night:
  alias: Master Bedroom Air - Night
  icon: mdi:snowflake-thermometer
  mode: single
  sequence:
  - parallel:
    - if:
      - '{{ is_state("person.samuel_kadolph", "home") }}'
      - condition: or
        conditions:
        - '{{ is_state("climate.master_bedroom_air", "off") }}'
        - '{{ not is_state_attr("climate.master_bedroom_air", "temperature", float(states("input_number.master_bedroom_air_night_temperature"))) }}'
      then:
      - action: script.midea_set_temperature
        data:
          data:
            hvac_mode: cool
            temperature: '{{ states("input_number.master_bedroom_air_night_temperature") }}'
          target: { entity_id: climate.master_bedroom_air }
      # - action: climate.set_temperature
      #   data:
      #     hvac_mode: cool
      #     temperature: '{{ states("input_number.master_bedroom_air_night_temperature") }}'
      #   target: { entity_id: climate.master_bedroom_air }
      - if:
        - '{{ is_state("fan.master_bedroom_fan", "off") }}'
        then:
        - action: fan.turn_on
          target: { entity_id: fan.master_bedroom_fan }
      - if:
        - '{{ is_state("input_boolean.master_bedroom_air_night_bed_heat", "on") }}'
        - '{{ is_state("person.sasha_keller", "home") }}'
        - '{{ is_state("switch.master_bed_side_b_power", "off") }}'
        then:
        - action: select.select_option
          data: { option: '{{ int(states("input_number.master_bedroom_air_night_bed_heat")) }}' }
          target: { entity_id: select.master_bed_side_b_heat_level }
    - action: zwave_js.set_config_parameter
      data: { parameter: 3, value: 2 }
      target: { entity_id: switch.master_bathroom_toilet_lights }
